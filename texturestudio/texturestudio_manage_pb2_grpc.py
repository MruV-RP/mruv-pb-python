# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from texturestudio import texturestudio_manage_pb2 as texturestudio_dot_texturestudio__manage__pb2


class TextureStudioManagerServiceStub(object):
    """Service to manage texture studio servers cluster.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateServer = channel.unary_unary(
                '/texture_studio.TextureStudioManagerService/CreateServer',
                request_serializer=texturestudio_dot_texturestudio__manage__pb2.CreateServerRequest.SerializeToString,
                response_deserializer=texturestudio_dot_texturestudio__manage__pb2.CreateServerResponse.FromString,
                )
        self.GetServers = channel.unary_unary(
                '/texture_studio.TextureStudioManagerService/GetServers',
                request_serializer=texturestudio_dot_texturestudio__manage__pb2.GetServersRequest.SerializeToString,
                response_deserializer=texturestudio_dot_texturestudio__manage__pb2.GetServersResponse.FromString,
                )
        self.MyServer = channel.unary_unary(
                '/texture_studio.TextureStudioManagerService/MyServer',
                request_serializer=texturestudio_dot_texturestudio__manage__pb2.MyServerRequest.SerializeToString,
                response_deserializer=texturestudio_dot_texturestudio__manage__pb2.MyServerResponse.FromString,
                )
        self.TransferOwnership = channel.unary_unary(
                '/texture_studio.TextureStudioManagerService/TransferOwnership',
                request_serializer=texturestudio_dot_texturestudio__manage__pb2.TransferOwnershipRequest.SerializeToString,
                response_deserializer=texturestudio_dot_texturestudio__manage__pb2.TransferOwnershipResponse.FromString,
                )
        self.DeleteServer = channel.unary_unary(
                '/texture_studio.TextureStudioManagerService/DeleteServer',
                request_serializer=texturestudio_dot_texturestudio__manage__pb2.DeleteServerRequest.SerializeToString,
                response_deserializer=texturestudio_dot_texturestudio__manage__pb2.DeleteServerResponse.FromString,
                )


class TextureStudioManagerServiceServicer(object):
    """Service to manage texture studio servers cluster.
    """

    def CreateServer(self, request, context):
        """Create a new texture studio server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServers(self, request, context):
        """Get all existing servers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyServer(self, request, context):
        """Get texture studio server id for current user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferOwnership(self, request, context):
        """Change owner of texture studio server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteServer(self, request, context):
        """Delete a texture studio server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextureStudioManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateServer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateServer,
                    request_deserializer=texturestudio_dot_texturestudio__manage__pb2.CreateServerRequest.FromString,
                    response_serializer=texturestudio_dot_texturestudio__manage__pb2.CreateServerResponse.SerializeToString,
            ),
            'GetServers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServers,
                    request_deserializer=texturestudio_dot_texturestudio__manage__pb2.GetServersRequest.FromString,
                    response_serializer=texturestudio_dot_texturestudio__manage__pb2.GetServersResponse.SerializeToString,
            ),
            'MyServer': grpc.unary_unary_rpc_method_handler(
                    servicer.MyServer,
                    request_deserializer=texturestudio_dot_texturestudio__manage__pb2.MyServerRequest.FromString,
                    response_serializer=texturestudio_dot_texturestudio__manage__pb2.MyServerResponse.SerializeToString,
            ),
            'TransferOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferOwnership,
                    request_deserializer=texturestudio_dot_texturestudio__manage__pb2.TransferOwnershipRequest.FromString,
                    response_serializer=texturestudio_dot_texturestudio__manage__pb2.TransferOwnershipResponse.SerializeToString,
            ),
            'DeleteServer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteServer,
                    request_deserializer=texturestudio_dot_texturestudio__manage__pb2.DeleteServerRequest.FromString,
                    response_serializer=texturestudio_dot_texturestudio__manage__pb2.DeleteServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'texture_studio.TextureStudioManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextureStudioManagerService(object):
    """Service to manage texture studio servers cluster.
    """

    @staticmethod
    def CreateServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texture_studio.TextureStudioManagerService/CreateServer',
            texturestudio_dot_texturestudio__manage__pb2.CreateServerRequest.SerializeToString,
            texturestudio_dot_texturestudio__manage__pb2.CreateServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texture_studio.TextureStudioManagerService/GetServers',
            texturestudio_dot_texturestudio__manage__pb2.GetServersRequest.SerializeToString,
            texturestudio_dot_texturestudio__manage__pb2.GetServersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texture_studio.TextureStudioManagerService/MyServer',
            texturestudio_dot_texturestudio__manage__pb2.MyServerRequest.SerializeToString,
            texturestudio_dot_texturestudio__manage__pb2.MyServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texture_studio.TextureStudioManagerService/TransferOwnership',
            texturestudio_dot_texturestudio__manage__pb2.TransferOwnershipRequest.SerializeToString,
            texturestudio_dot_texturestudio__manage__pb2.TransferOwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texture_studio.TextureStudioManagerService/DeleteServer',
            texturestudio_dot_texturestudio__manage__pb2.DeleteServerRequest.SerializeToString,
            texturestudio_dot_texturestudio__manage__pb2.DeleteServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
