# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from vehicles import vehicles_pb2 as vehicles_dot_vehicles__pb2


class MruVVehiclesServiceStub(object):
    """The MruV vehicles service provides procedures for managing vehicles.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVehicle = channel.unary_unary(
                '/mruv.vehicles.MruVVehiclesService/CreateVehicle',
                request_serializer=vehicles_dot_vehicles__pb2.CreateVehicleRequest.SerializeToString,
                response_deserializer=vehicles_dot_vehicles__pb2.CreateVehicleResponse.FromString,
                )
        self.GetVehicle = channel.unary_unary(
                '/mruv.vehicles.MruVVehiclesService/GetVehicle',
                request_serializer=vehicles_dot_vehicles__pb2.GetVehicleRequest.SerializeToString,
                response_deserializer=vehicles_dot_vehicles__pb2.GetVehicleResponse.FromString,
                )
        self.UpdateVehicle = channel.unary_unary(
                '/mruv.vehicles.MruVVehiclesService/UpdateVehicle',
                request_serializer=vehicles_dot_vehicles__pb2.UpdateVehicleRequest.SerializeToString,
                response_deserializer=vehicles_dot_vehicles__pb2.UpdateVehicleResponse.FromString,
                )
        self.DeleteVehicle = channel.unary_unary(
                '/mruv.vehicles.MruVVehiclesService/DeleteVehicle',
                request_serializer=vehicles_dot_vehicles__pb2.DeleteVehicleRequest.SerializeToString,
                response_deserializer=vehicles_dot_vehicles__pb2.DeleteVehicleResponse.FromString,
                )


class MruVVehiclesServiceServicer(object):
    """The MruV vehicles service provides procedures for managing vehicles.
    """

    def CreateVehicle(self, request, context):
        """Create a vehicle.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVehicle(self, request, context):
        """Get a vehicle.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateVehicle(self, request, context):
        """Update a vehicle.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVehicle(self, request, context):
        """Delete a vehicle.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MruVVehiclesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateVehicle': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVehicle,
                    request_deserializer=vehicles_dot_vehicles__pb2.CreateVehicleRequest.FromString,
                    response_serializer=vehicles_dot_vehicles__pb2.CreateVehicleResponse.SerializeToString,
            ),
            'GetVehicle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVehicle,
                    request_deserializer=vehicles_dot_vehicles__pb2.GetVehicleRequest.FromString,
                    response_serializer=vehicles_dot_vehicles__pb2.GetVehicleResponse.SerializeToString,
            ),
            'UpdateVehicle': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateVehicle,
                    request_deserializer=vehicles_dot_vehicles__pb2.UpdateVehicleRequest.FromString,
                    response_serializer=vehicles_dot_vehicles__pb2.UpdateVehicleResponse.SerializeToString,
            ),
            'DeleteVehicle': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteVehicle,
                    request_deserializer=vehicles_dot_vehicles__pb2.DeleteVehicleRequest.FromString,
                    response_serializer=vehicles_dot_vehicles__pb2.DeleteVehicleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mruv.vehicles.MruVVehiclesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MruVVehiclesService(object):
    """The MruV vehicles service provides procedures for managing vehicles.
    """

    @staticmethod
    def CreateVehicle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.vehicles.MruVVehiclesService/CreateVehicle',
            vehicles_dot_vehicles__pb2.CreateVehicleRequest.SerializeToString,
            vehicles_dot_vehicles__pb2.CreateVehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVehicle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.vehicles.MruVVehiclesService/GetVehicle',
            vehicles_dot_vehicles__pb2.GetVehicleRequest.SerializeToString,
            vehicles_dot_vehicles__pb2.GetVehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateVehicle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.vehicles.MruVVehiclesService/UpdateVehicle',
            vehicles_dot_vehicles__pb2.UpdateVehicleRequest.SerializeToString,
            vehicles_dot_vehicles__pb2.UpdateVehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteVehicle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.vehicles.MruVVehiclesService/DeleteVehicle',
            vehicles_dot_vehicles__pb2.DeleteVehicleRequest.SerializeToString,
            vehicles_dot_vehicles__pb2.DeleteVehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
