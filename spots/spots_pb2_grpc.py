# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from spots import spots_pb2 as spots_dot_spots__pb2


class MruVSpotsServiceStub(object):
    """The MruV spots service provides procedures for managing spots.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSpot = channel.unary_unary(
                '/mruv.spots.MruVSpotsService/CreateSpot',
                request_serializer=spots_dot_spots__pb2.CreateSpotRequest.SerializeToString,
                response_deserializer=spots_dot_spots__pb2.CreateSpotResponse.FromString,
                )
        self.GetSpot = channel.unary_unary(
                '/mruv.spots.MruVSpotsService/GetSpot',
                request_serializer=spots_dot_spots__pb2.GetSpotRequest.SerializeToString,
                response_deserializer=spots_dot_spots__pb2.GetSpotResponse.FromString,
                )
        self.UpdateSpot = channel.unary_unary(
                '/mruv.spots.MruVSpotsService/UpdateSpot',
                request_serializer=spots_dot_spots__pb2.UpdateSpotRequest.SerializeToString,
                response_deserializer=spots_dot_spots__pb2.UpdateSpotResponse.FromString,
                )
        self.DeleteSpot = channel.unary_unary(
                '/mruv.spots.MruVSpotsService/DeleteSpot',
                request_serializer=spots_dot_spots__pb2.DeleteSpotRequest.SerializeToString,
                response_deserializer=spots_dot_spots__pb2.DeleteSpotResponse.FromString,
                )
        self.FetchAll = channel.unary_stream(
                '/mruv.spots.MruVSpotsService/FetchAll',
                request_serializer=spots_dot_spots__pb2.FetchAllSpotsRequest.SerializeToString,
                response_deserializer=spots_dot_spots__pb2.FetchAllSpotsResponse.FromString,
                )


class MruVSpotsServiceServicer(object):
    """The MruV spots service provides procedures for managing spots.
    """

    def CreateSpot(self, request, context):
        """Create a spot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpot(self, request, context):
        """Get a spot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSpot(self, request, context):
        """Update a spot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSpot(self, request, context):
        """Delete a spot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchAll(self, request, context):
        """Fetch all spots.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MruVSpotsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSpot': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSpot,
                    request_deserializer=spots_dot_spots__pb2.CreateSpotRequest.FromString,
                    response_serializer=spots_dot_spots__pb2.CreateSpotResponse.SerializeToString,
            ),
            'GetSpot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpot,
                    request_deserializer=spots_dot_spots__pb2.GetSpotRequest.FromString,
                    response_serializer=spots_dot_spots__pb2.GetSpotResponse.SerializeToString,
            ),
            'UpdateSpot': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSpot,
                    request_deserializer=spots_dot_spots__pb2.UpdateSpotRequest.FromString,
                    response_serializer=spots_dot_spots__pb2.UpdateSpotResponse.SerializeToString,
            ),
            'DeleteSpot': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSpot,
                    request_deserializer=spots_dot_spots__pb2.DeleteSpotRequest.FromString,
                    response_serializer=spots_dot_spots__pb2.DeleteSpotResponse.SerializeToString,
            ),
            'FetchAll': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchAll,
                    request_deserializer=spots_dot_spots__pb2.FetchAllSpotsRequest.FromString,
                    response_serializer=spots_dot_spots__pb2.FetchAllSpotsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mruv.spots.MruVSpotsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MruVSpotsService(object):
    """The MruV spots service provides procedures for managing spots.
    """

    @staticmethod
    def CreateSpot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.spots.MruVSpotsService/CreateSpot',
            spots_dot_spots__pb2.CreateSpotRequest.SerializeToString,
            spots_dot_spots__pb2.CreateSpotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSpot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.spots.MruVSpotsService/GetSpot',
            spots_dot_spots__pb2.GetSpotRequest.SerializeToString,
            spots_dot_spots__pb2.GetSpotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSpot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.spots.MruVSpotsService/UpdateSpot',
            spots_dot_spots__pb2.UpdateSpotRequest.SerializeToString,
            spots_dot_spots__pb2.UpdateSpotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSpot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.spots.MruVSpotsService/DeleteSpot',
            spots_dot_spots__pb2.DeleteSpotRequest.SerializeToString,
            spots_dot_spots__pb2.DeleteSpotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mruv.spots.MruVSpotsService/FetchAll',
            spots_dot_spots__pb2.FetchAllSpotsRequest.SerializeToString,
            spots_dot_spots__pb2.FetchAllSpotsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
