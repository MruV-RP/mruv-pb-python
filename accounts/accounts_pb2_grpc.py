# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from accounts import accounts_pb2 as accounts_dot_accounts__pb2


class MruVAccountsServiceStub(object):
    """The MruV accounts service provides procedures for managing players accounts.
    This service is an additional/intermediary service between the ORY Kratos & ORY Hydra service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAccount = channel.unary_unary(
                '/mruv.MruVAccountsService/RegisterAccount',
                request_serializer=accounts_dot_accounts__pb2.RegisterAccountRequest.SerializeToString,
                response_deserializer=accounts_dot_accounts__pb2.RegisterAccountResponse.FromString,
                )
        self.LogIn = channel.unary_unary(
                '/mruv.MruVAccountsService/LogIn',
                request_serializer=accounts_dot_accounts__pb2.LogInRequest.SerializeToString,
                response_deserializer=accounts_dot_accounts__pb2.LogInResponse.FromString,
                )
        self.IsAccountExist = channel.unary_unary(
                '/mruv.MruVAccountsService/IsAccountExist',
                request_serializer=accounts_dot_accounts__pb2.IsAccountExistRequest.SerializeToString,
                response_deserializer=accounts_dot_accounts__pb2.IsAccountExistResponse.FromString,
                )
        self.GetAccount = channel.unary_unary(
                '/mruv.MruVAccountsService/GetAccount',
                request_serializer=accounts_dot_accounts__pb2.GetAccountRequest.SerializeToString,
                response_deserializer=accounts_dot_accounts__pb2.GetAccountResponse.FromString,
                )
        self.GetAccountCharacters = channel.unary_unary(
                '/mruv.MruVAccountsService/GetAccountCharacters',
                request_serializer=accounts_dot_accounts__pb2.GetAccountCharactersRequest.SerializeToString,
                response_deserializer=accounts_dot_accounts__pb2.GetAccountCharactersResponse.FromString,
                )


class MruVAccountsServiceServicer(object):
    """The MruV accounts service provides procedures for managing players accounts.
    This service is an additional/intermediary service between the ORY Kratos & ORY Hydra service.
    """

    def RegisterAccount(self, request, context):
        """Register a new account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogIn(self, request, context):
        """Sign into an existing account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsAccountExist(self, request, context):
        """Check, is account with specified login exist. If yes, it returns account id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccount(self, request, context):
        """Get an account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountCharacters(self, request, context):
        """Get an account characters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MruVAccountsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAccount,
                    request_deserializer=accounts_dot_accounts__pb2.RegisterAccountRequest.FromString,
                    response_serializer=accounts_dot_accounts__pb2.RegisterAccountResponse.SerializeToString,
            ),
            'LogIn': grpc.unary_unary_rpc_method_handler(
                    servicer.LogIn,
                    request_deserializer=accounts_dot_accounts__pb2.LogInRequest.FromString,
                    response_serializer=accounts_dot_accounts__pb2.LogInResponse.SerializeToString,
            ),
            'IsAccountExist': grpc.unary_unary_rpc_method_handler(
                    servicer.IsAccountExist,
                    request_deserializer=accounts_dot_accounts__pb2.IsAccountExistRequest.FromString,
                    response_serializer=accounts_dot_accounts__pb2.IsAccountExistResponse.SerializeToString,
            ),
            'GetAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccount,
                    request_deserializer=accounts_dot_accounts__pb2.GetAccountRequest.FromString,
                    response_serializer=accounts_dot_accounts__pb2.GetAccountResponse.SerializeToString,
            ),
            'GetAccountCharacters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountCharacters,
                    request_deserializer=accounts_dot_accounts__pb2.GetAccountCharactersRequest.FromString,
                    response_serializer=accounts_dot_accounts__pb2.GetAccountCharactersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mruv.MruVAccountsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MruVAccountsService(object):
    """The MruV accounts service provides procedures for managing players accounts.
    This service is an additional/intermediary service between the ORY Kratos & ORY Hydra service.
    """

    @staticmethod
    def RegisterAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.MruVAccountsService/RegisterAccount',
            accounts_dot_accounts__pb2.RegisterAccountRequest.SerializeToString,
            accounts_dot_accounts__pb2.RegisterAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.MruVAccountsService/LogIn',
            accounts_dot_accounts__pb2.LogInRequest.SerializeToString,
            accounts_dot_accounts__pb2.LogInResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsAccountExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.MruVAccountsService/IsAccountExist',
            accounts_dot_accounts__pb2.IsAccountExistRequest.SerializeToString,
            accounts_dot_accounts__pb2.IsAccountExistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.MruVAccountsService/GetAccount',
            accounts_dot_accounts__pb2.GetAccountRequest.SerializeToString,
            accounts_dot_accounts__pb2.GetAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountCharacters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.MruVAccountsService/GetAccountCharacters',
            accounts_dot_accounts__pb2.GetAccountCharactersRequest.SerializeToString,
            accounts_dot_accounts__pb2.GetAccountCharactersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
