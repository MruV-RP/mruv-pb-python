# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common import health_pb2 as common_dot_health__pb2
from groups import groups_pb2 as groups_dot_groups__pb2


class MruVGroupsServiceStub(object):
    """The MruV groups service provides procedures for managing groups.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGroup = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/CreateGroup',
                request_serializer=groups_dot_groups__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.CreateGroupResponse.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetGroup',
                request_serializer=groups_dot_groups__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.GetGroupResponse.FromString,
                )
        self.UpdateGroup = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/UpdateGroup',
                request_serializer=groups_dot_groups__pb2.UpdateGroupRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.UpdateGroupResponse.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/DeleteGroup',
                request_serializer=groups_dot_groups__pb2.DeleteGroupRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.DeleteGroupResponse.FromString,
                )
        self.GetGroups = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetGroups',
                request_serializer=groups_dot_groups__pb2.GetGroupsRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.GetGroupsResponse.FromString,
                )
        self.AssignOwner = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/AssignOwner',
                request_serializer=groups_dot_groups__pb2.AssignOwnerRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.AssignOwnerResponse.FromString,
                )
        self.GetOwner = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetOwner',
                request_serializer=groups_dot_groups__pb2.GetOwnerRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.GetOwnerResponse.FromString,
                )
        self.AddMember = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/AddMember',
                request_serializer=groups_dot_groups__pb2.AddMemberRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.AddMemberResponse.FromString,
                )
        self.GetMembers = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetMembers',
                request_serializer=groups_dot_groups__pb2.GetMembersRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.GetMembersResponse.FromString,
                )
        self.RemoveMember = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/RemoveMember',
                request_serializer=groups_dot_groups__pb2.RemoveMemberRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.RemoveMemberResponse.FromString,
                )
        self.AddPermission = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/AddPermission',
                request_serializer=groups_dot_groups__pb2.AddPermissionRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.AddPermissionResponse.FromString,
                )
        self.GetPermissions = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetPermissions',
                request_serializer=groups_dot_groups__pb2.GetPermissionsRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.GetPermissionsResponse.FromString,
                )
        self.RemovePermission = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/RemovePermission',
                request_serializer=groups_dot_groups__pb2.RemovePermissionRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.RemovePermissionResponse.FromString,
                )
        self.AddSubgroup = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/AddSubgroup',
                request_serializer=groups_dot_groups__pb2.AddSubgroupRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.AddSubgroupResponse.FromString,
                )
        self.GetSubgroups = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetSubgroups',
                request_serializer=groups_dot_groups__pb2.GetSubgroupsRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.GetSubgroupsResponse.FromString,
                )
        self.RemoveSubgroup = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/RemoveSubgroup',
                request_serializer=groups_dot_groups__pb2.RemoveSubgroupRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.RemoveSubgroupResponse.FromString,
                )
        self.IsPermitted = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/IsPermitted',
                request_serializer=groups_dot_groups__pb2.IsPermittedRequest.SerializeToString,
                response_deserializer=groups_dot_groups__pb2.IsPermittedResponse.FromString,
                )
        self.GetServiceStatus = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetServiceStatus',
                request_serializer=common_dot_health__pb2.ServiceStatusRequest.SerializeToString,
                response_deserializer=common_dot_health__pb2.ServiceStatusResponse.FromString,
                )
        self.GetServiceVersion = channel.unary_unary(
                '/mruv.groups.MruVGroupsService/GetServiceVersion',
                request_serializer=common_dot_health__pb2.VersionRequest.SerializeToString,
                response_deserializer=common_dot_health__pb2.VersionResponse.FromString,
                )


class MruVGroupsServiceServicer(object):
    """The MruV groups service provides procedures for managing groups.
    """

    def CreateGroup(self, request, context):
        """Create a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Get a  group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroup(self, request, context):
        """Update a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Delete a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroups(self, request, context):
        """Get all groups.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignOwner(self, request, context):
        """Assign an owner. Group can have only one owner. Owner can be a player, a group or an account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOwner(self, request, context):
        """Get group owner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMember(self, request, context):
        """Add a group member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMembers(self, request, context):
        """Get a group member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveMember(self, request, context):
        """Remove a group member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPermission(self, request, context):
        """Add a permission to a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPermissions(self, request, context):
        """Get all group permissions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePermission(self, request, context):
        """Remove group permission.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSubgroup(self, request, context):
        """Add a subgroup to a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubgroups(self, request, context):
        """Get all subgroups.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSubgroup(self, request, context):
        """Remove a subgroup from group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsPermitted(self, request, context):
        """Check is member of a group is permitted to do specific action.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceStatus(self, request, context):
        """Service status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MruVGroupsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=groups_dot_groups__pb2.CreateGroupRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.CreateGroupResponse.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=groups_dot_groups__pb2.GetGroupRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.GetGroupResponse.SerializeToString,
            ),
            'UpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroup,
                    request_deserializer=groups_dot_groups__pb2.UpdateGroupRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.UpdateGroupResponse.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=groups_dot_groups__pb2.DeleteGroupRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.DeleteGroupResponse.SerializeToString,
            ),
            'GetGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroups,
                    request_deserializer=groups_dot_groups__pb2.GetGroupsRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.GetGroupsResponse.SerializeToString,
            ),
            'AssignOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignOwner,
                    request_deserializer=groups_dot_groups__pb2.AssignOwnerRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.AssignOwnerResponse.SerializeToString,
            ),
            'GetOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOwner,
                    request_deserializer=groups_dot_groups__pb2.GetOwnerRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.GetOwnerResponse.SerializeToString,
            ),
            'AddMember': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMember,
                    request_deserializer=groups_dot_groups__pb2.AddMemberRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.AddMemberResponse.SerializeToString,
            ),
            'GetMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMembers,
                    request_deserializer=groups_dot_groups__pb2.GetMembersRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.GetMembersResponse.SerializeToString,
            ),
            'RemoveMember': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveMember,
                    request_deserializer=groups_dot_groups__pb2.RemoveMemberRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.RemoveMemberResponse.SerializeToString,
            ),
            'AddPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPermission,
                    request_deserializer=groups_dot_groups__pb2.AddPermissionRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.AddPermissionResponse.SerializeToString,
            ),
            'GetPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPermissions,
                    request_deserializer=groups_dot_groups__pb2.GetPermissionsRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.GetPermissionsResponse.SerializeToString,
            ),
            'RemovePermission': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePermission,
                    request_deserializer=groups_dot_groups__pb2.RemovePermissionRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.RemovePermissionResponse.SerializeToString,
            ),
            'AddSubgroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSubgroup,
                    request_deserializer=groups_dot_groups__pb2.AddSubgroupRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.AddSubgroupResponse.SerializeToString,
            ),
            'GetSubgroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubgroups,
                    request_deserializer=groups_dot_groups__pb2.GetSubgroupsRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.GetSubgroupsResponse.SerializeToString,
            ),
            'RemoveSubgroup': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSubgroup,
                    request_deserializer=groups_dot_groups__pb2.RemoveSubgroupRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.RemoveSubgroupResponse.SerializeToString,
            ),
            'IsPermitted': grpc.unary_unary_rpc_method_handler(
                    servicer.IsPermitted,
                    request_deserializer=groups_dot_groups__pb2.IsPermittedRequest.FromString,
                    response_serializer=groups_dot_groups__pb2.IsPermittedResponse.SerializeToString,
            ),
            'GetServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceStatus,
                    request_deserializer=common_dot_health__pb2.ServiceStatusRequest.FromString,
                    response_serializer=common_dot_health__pb2.ServiceStatusResponse.SerializeToString,
            ),
            'GetServiceVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceVersion,
                    request_deserializer=common_dot_health__pb2.VersionRequest.FromString,
                    response_serializer=common_dot_health__pb2.VersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mruv.groups.MruVGroupsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MruVGroupsService(object):
    """The MruV groups service provides procedures for managing groups.
    """

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/CreateGroup',
            groups_dot_groups__pb2.CreateGroupRequest.SerializeToString,
            groups_dot_groups__pb2.CreateGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetGroup',
            groups_dot_groups__pb2.GetGroupRequest.SerializeToString,
            groups_dot_groups__pb2.GetGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/UpdateGroup',
            groups_dot_groups__pb2.UpdateGroupRequest.SerializeToString,
            groups_dot_groups__pb2.UpdateGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/DeleteGroup',
            groups_dot_groups__pb2.DeleteGroupRequest.SerializeToString,
            groups_dot_groups__pb2.DeleteGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetGroups',
            groups_dot_groups__pb2.GetGroupsRequest.SerializeToString,
            groups_dot_groups__pb2.GetGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssignOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/AssignOwner',
            groups_dot_groups__pb2.AssignOwnerRequest.SerializeToString,
            groups_dot_groups__pb2.AssignOwnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetOwner',
            groups_dot_groups__pb2.GetOwnerRequest.SerializeToString,
            groups_dot_groups__pb2.GetOwnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/AddMember',
            groups_dot_groups__pb2.AddMemberRequest.SerializeToString,
            groups_dot_groups__pb2.AddMemberResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetMembers',
            groups_dot_groups__pb2.GetMembersRequest.SerializeToString,
            groups_dot_groups__pb2.GetMembersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/RemoveMember',
            groups_dot_groups__pb2.RemoveMemberRequest.SerializeToString,
            groups_dot_groups__pb2.RemoveMemberResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/AddPermission',
            groups_dot_groups__pb2.AddPermissionRequest.SerializeToString,
            groups_dot_groups__pb2.AddPermissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetPermissions',
            groups_dot_groups__pb2.GetPermissionsRequest.SerializeToString,
            groups_dot_groups__pb2.GetPermissionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemovePermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/RemovePermission',
            groups_dot_groups__pb2.RemovePermissionRequest.SerializeToString,
            groups_dot_groups__pb2.RemovePermissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddSubgroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/AddSubgroup',
            groups_dot_groups__pb2.AddSubgroupRequest.SerializeToString,
            groups_dot_groups__pb2.AddSubgroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubgroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetSubgroups',
            groups_dot_groups__pb2.GetSubgroupsRequest.SerializeToString,
            groups_dot_groups__pb2.GetSubgroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveSubgroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/RemoveSubgroup',
            groups_dot_groups__pb2.RemoveSubgroupRequest.SerializeToString,
            groups_dot_groups__pb2.RemoveSubgroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsPermitted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/IsPermitted',
            groups_dot_groups__pb2.IsPermittedRequest.SerializeToString,
            groups_dot_groups__pb2.IsPermittedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetServiceStatus',
            common_dot_health__pb2.ServiceStatusRequest.SerializeToString,
            common_dot_health__pb2.ServiceStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.groups.MruVGroupsService/GetServiceVersion',
            common_dot_health__pb2.VersionRequest.SerializeToString,
            common_dot_health__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
