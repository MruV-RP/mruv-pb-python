# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from entrances import entrances_pb2 as entrances_dot_entrances__pb2


class MruVEntrancesServiceStub(object):
    """The MruV entrances service provides procedures for managing an entrances to estates and teleportation to locations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateEntrance = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/CreateEntrance',
                request_serializer=entrances_dot_entrances__pb2.CreateEntranceRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.CreateEntranceResponse.FromString,
                )
        self.GetEntrance = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/GetEntrance',
                request_serializer=entrances_dot_entrances__pb2.GetEntranceRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.GetEntranceResponse.FromString,
                )
        self.UpdateEntrance = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/UpdateEntrance',
                request_serializer=entrances_dot_entrances__pb2.UpdateEntranceRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.UpdateEntranceResponse.FromString,
                )
        self.DeleteEntrance = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/DeleteEntrance',
                request_serializer=entrances_dot_entrances__pb2.DeleteEntranceRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.DeleteEntranceResponse.FromString,
                )
        self.Lock = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/Lock',
                request_serializer=entrances_dot_entrances__pb2.LockRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.LockResponse.FromString,
                )
        self.Unlock = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/Unlock',
                request_serializer=entrances_dot_entrances__pb2.UnlockRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.UnlockResponse.FromString,
                )
        self.FindNearestEntrance = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/FindNearestEntrance',
                request_serializer=entrances_dot_entrances__pb2.FindNearestEntranceRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.FindNearestEntranceResponse.FromString,
                )
        self.Enter = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/Enter',
                request_serializer=entrances_dot_entrances__pb2.EnterRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.EnterResponse.FromString,
                )
        self.Exit = channel.unary_unary(
                '/mruv.entrances.MruVEntrancesService/Exit',
                request_serializer=entrances_dot_entrances__pb2.ExitRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.ExitResponse.FromString,
                )
        self.FetchAll = channel.unary_stream(
                '/mruv.entrances.MruVEntrancesService/FetchAll',
                request_serializer=entrances_dot_entrances__pb2.FetchAllEntrancesRequest.SerializeToString,
                response_deserializer=entrances_dot_entrances__pb2.FetchAllEntrancesResponse.FromString,
                )


class MruVEntrancesServiceServicer(object):
    """The MruV entrances service provides procedures for managing an entrances to estates and teleportation to locations.
    """

    def CreateEntrance(self, request, context):
        """Create an entrance to building or teleport to location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEntrance(self, request, context):
        """Get an entrance to building or a teleport to location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEntrance(self, request, context):
        """Update an entrance to building or a teleport to location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEntrance(self, request, context):
        """Delete an entrance to building or a teleport to location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
        """Lock entrance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
        """Unload entrance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindNearestEntrance(self, request, context):
        """Find gate that is closest to a specific position.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Enter(self, request, context):
        """Enter an entrance (player teleport from in spot position to out spot position).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exit(self, request, context):
        """Exit from entrance (player teleport from out spot position to in spot position).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchAll(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MruVEntrancesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateEntrance': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEntrance,
                    request_deserializer=entrances_dot_entrances__pb2.CreateEntranceRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.CreateEntranceResponse.SerializeToString,
            ),
            'GetEntrance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntrance,
                    request_deserializer=entrances_dot_entrances__pb2.GetEntranceRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.GetEntranceResponse.SerializeToString,
            ),
            'UpdateEntrance': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEntrance,
                    request_deserializer=entrances_dot_entrances__pb2.UpdateEntranceRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.UpdateEntranceResponse.SerializeToString,
            ),
            'DeleteEntrance': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEntrance,
                    request_deserializer=entrances_dot_entrances__pb2.DeleteEntranceRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.DeleteEntranceResponse.SerializeToString,
            ),
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=entrances_dot_entrances__pb2.LockRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.LockResponse.SerializeToString,
            ),
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=entrances_dot_entrances__pb2.UnlockRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.UnlockResponse.SerializeToString,
            ),
            'FindNearestEntrance': grpc.unary_unary_rpc_method_handler(
                    servicer.FindNearestEntrance,
                    request_deserializer=entrances_dot_entrances__pb2.FindNearestEntranceRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.FindNearestEntranceResponse.SerializeToString,
            ),
            'Enter': grpc.unary_unary_rpc_method_handler(
                    servicer.Enter,
                    request_deserializer=entrances_dot_entrances__pb2.EnterRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.EnterResponse.SerializeToString,
            ),
            'Exit': grpc.unary_unary_rpc_method_handler(
                    servicer.Exit,
                    request_deserializer=entrances_dot_entrances__pb2.ExitRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.ExitResponse.SerializeToString,
            ),
            'FetchAll': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchAll,
                    request_deserializer=entrances_dot_entrances__pb2.FetchAllEntrancesRequest.FromString,
                    response_serializer=entrances_dot_entrances__pb2.FetchAllEntrancesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mruv.entrances.MruVEntrancesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MruVEntrancesService(object):
    """The MruV entrances service provides procedures for managing an entrances to estates and teleportation to locations.
    """

    @staticmethod
    def CreateEntrance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/CreateEntrance',
            entrances_dot_entrances__pb2.CreateEntranceRequest.SerializeToString,
            entrances_dot_entrances__pb2.CreateEntranceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEntrance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/GetEntrance',
            entrances_dot_entrances__pb2.GetEntranceRequest.SerializeToString,
            entrances_dot_entrances__pb2.GetEntranceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEntrance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/UpdateEntrance',
            entrances_dot_entrances__pb2.UpdateEntranceRequest.SerializeToString,
            entrances_dot_entrances__pb2.UpdateEntranceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEntrance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/DeleteEntrance',
            entrances_dot_entrances__pb2.DeleteEntranceRequest.SerializeToString,
            entrances_dot_entrances__pb2.DeleteEntranceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/Lock',
            entrances_dot_entrances__pb2.LockRequest.SerializeToString,
            entrances_dot_entrances__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/Unlock',
            entrances_dot_entrances__pb2.UnlockRequest.SerializeToString,
            entrances_dot_entrances__pb2.UnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindNearestEntrance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/FindNearestEntrance',
            entrances_dot_entrances__pb2.FindNearestEntranceRequest.SerializeToString,
            entrances_dot_entrances__pb2.FindNearestEntranceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Enter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/Enter',
            entrances_dot_entrances__pb2.EnterRequest.SerializeToString,
            entrances_dot_entrances__pb2.EnterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.entrances.MruVEntrancesService/Exit',
            entrances_dot_entrances__pb2.ExitRequest.SerializeToString,
            entrances_dot_entrances__pb2.ExitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mruv.entrances.MruVEntrancesService/FetchAll',
            entrances_dot_entrances__pb2.FetchAllEntrancesRequest.SerializeToString,
            entrances_dot_entrances__pb2.FetchAllEntrancesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
