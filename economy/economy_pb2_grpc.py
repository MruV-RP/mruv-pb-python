# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from economy import economy_pb2 as economy_dot_economy__pb2


class MruVEconomyServiceStub(object):
    """The MruV economy service provides procedures for managing prices and economy.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterProduct = channel.unary_unary(
                '/mruv.economy.MruVEconomyService/RegisterProduct',
                request_serializer=economy_dot_economy__pb2.RegisterProductRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.RegisterProductResponse.FromString,
                )
        self.GetProduct = channel.unary_unary(
                '/mruv.economy.MruVEconomyService/GetProduct',
                request_serializer=economy_dot_economy__pb2.GetProductRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.GetProductResponse.FromString,
                )
        self.UpdateProduct = channel.unary_unary(
                '/mruv.economy.MruVEconomyService/UpdateProduct',
                request_serializer=economy_dot_economy__pb2.UpdateProductRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.UpdateProductResponse.FromString,
                )
        self.DeleteProduct = channel.unary_unary(
                '/mruv.economy.MruVEconomyService/DeleteProduct',
                request_serializer=economy_dot_economy__pb2.DeleteProductRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.DeleteProductResponse.FromString,
                )
        self.UpdatePrice = channel.unary_unary(
                '/mruv.economy.MruVEconomyService/UpdatePrice',
                request_serializer=economy_dot_economy__pb2.UpdatePriceRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.UpdatePriceResponse.FromString,
                )
        self.GetPrice = channel.unary_unary(
                '/mruv.economy.MruVEconomyService/GetPrice',
                request_serializer=economy_dot_economy__pb2.GetPriceRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.GetPriceResponse.FromString,
                )
        self.BuyProduct = channel.unary_unary(
                '/mruv.economy.MruVEconomyService/BuyProduct',
                request_serializer=economy_dot_economy__pb2.BuyProductRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.BuyProductResponse.FromString,
                )
        self.WatchProduct = channel.unary_stream(
                '/mruv.economy.MruVEconomyService/WatchProduct',
                request_serializer=economy_dot_economy__pb2.WatchProductRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.WatchProductResponse.FromString,
                )
        self.WatchPrice = channel.unary_stream(
                '/mruv.economy.MruVEconomyService/WatchPrice',
                request_serializer=economy_dot_economy__pb2.WatchPriceRequest.SerializeToString,
                response_deserializer=economy_dot_economy__pb2.WatchPriceResponse.FromString,
                )


class MruVEconomyServiceServicer(object):
    """The MruV economy service provides procedures for managing prices and economy.
    """

    def RegisterProduct(self, request, context):
        """Register price in economy system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProduct(self, request, context):
        """Get product information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProduct(self, request, context):
        """Update product information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProduct(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePrice(self, request, context):
        """Update product price.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrice(self, request, context):
        """Get current value for registered price.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyProduct(self, request, context):
        """Send information to the system, that the product has been purchased.
        This rpc call can affect a product price.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchProduct(self, request, context):
        """Subscribe to events related to a product.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchPrice(self, request, context):
        """Subscribe to product price changes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MruVEconomyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterProduct,
                    request_deserializer=economy_dot_economy__pb2.RegisterProductRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.RegisterProductResponse.SerializeToString,
            ),
            'GetProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProduct,
                    request_deserializer=economy_dot_economy__pb2.GetProductRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.GetProductResponse.SerializeToString,
            ),
            'UpdateProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProduct,
                    request_deserializer=economy_dot_economy__pb2.UpdateProductRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.UpdateProductResponse.SerializeToString,
            ),
            'DeleteProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProduct,
                    request_deserializer=economy_dot_economy__pb2.DeleteProductRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.DeleteProductResponse.SerializeToString,
            ),
            'UpdatePrice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePrice,
                    request_deserializer=economy_dot_economy__pb2.UpdatePriceRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.UpdatePriceResponse.SerializeToString,
            ),
            'GetPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrice,
                    request_deserializer=economy_dot_economy__pb2.GetPriceRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.GetPriceResponse.SerializeToString,
            ),
            'BuyProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyProduct,
                    request_deserializer=economy_dot_economy__pb2.BuyProductRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.BuyProductResponse.SerializeToString,
            ),
            'WatchProduct': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchProduct,
                    request_deserializer=economy_dot_economy__pb2.WatchProductRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.WatchProductResponse.SerializeToString,
            ),
            'WatchPrice': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchPrice,
                    request_deserializer=economy_dot_economy__pb2.WatchPriceRequest.FromString,
                    response_serializer=economy_dot_economy__pb2.WatchPriceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mruv.economy.MruVEconomyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MruVEconomyService(object):
    """The MruV economy service provides procedures for managing prices and economy.
    """

    @staticmethod
    def RegisterProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.economy.MruVEconomyService/RegisterProduct',
            economy_dot_economy__pb2.RegisterProductRequest.SerializeToString,
            economy_dot_economy__pb2.RegisterProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.economy.MruVEconomyService/GetProduct',
            economy_dot_economy__pb2.GetProductRequest.SerializeToString,
            economy_dot_economy__pb2.GetProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.economy.MruVEconomyService/UpdateProduct',
            economy_dot_economy__pb2.UpdateProductRequest.SerializeToString,
            economy_dot_economy__pb2.UpdateProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.economy.MruVEconomyService/DeleteProduct',
            economy_dot_economy__pb2.DeleteProductRequest.SerializeToString,
            economy_dot_economy__pb2.DeleteProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.economy.MruVEconomyService/UpdatePrice',
            economy_dot_economy__pb2.UpdatePriceRequest.SerializeToString,
            economy_dot_economy__pb2.UpdatePriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.economy.MruVEconomyService/GetPrice',
            economy_dot_economy__pb2.GetPriceRequest.SerializeToString,
            economy_dot_economy__pb2.GetPriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.economy.MruVEconomyService/BuyProduct',
            economy_dot_economy__pb2.BuyProductRequest.SerializeToString,
            economy_dot_economy__pb2.BuyProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mruv.economy.MruVEconomyService/WatchProduct',
            economy_dot_economy__pb2.WatchProductRequest.SerializeToString,
            economy_dot_economy__pb2.WatchProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mruv.economy.MruVEconomyService/WatchPrice',
            economy_dot_economy__pb2.WatchPriceRequest.SerializeToString,
            economy_dot_economy__pb2.WatchPriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
