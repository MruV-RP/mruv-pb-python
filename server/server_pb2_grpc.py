# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from server import server_model_pb2 as server_dot_server__model__pb2
from server import server_pb2 as server_dot_server__pb2


class MruVServerServiceStub(object):
    """The MruV server service provides procedures for managing game platform server actions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterServer = channel.unary_unary(
                '/mruv.server.MruVServerService/RegisterServer',
                request_serializer=server_dot_server__model__pb2.ServerInfo.SerializeToString,
                response_deserializer=server_dot_server__model__pb2.ServerID.FromString,
                )
        self.GetRegisteredServers = channel.unary_unary(
                '/mruv.server.MruVServerService/GetRegisteredServers',
                request_serializer=server_dot_server__pb2.GetRegisteredServersRequest.SerializeToString,
                response_deserializer=server_dot_server__pb2.GetRegisteredServersResponse.FromString,
                )
        self.GetServerInfo = channel.unary_unary(
                '/mruv.server.MruVServerService/GetServerInfo',
                request_serializer=server_dot_server__model__pb2.ServerID.SerializeToString,
                response_deserializer=server_dot_server__model__pb2.ServerInfo.FromString,
                )
        self.UpdateServerStatus = channel.unary_unary(
                '/mruv.server.MruVServerService/UpdateServerStatus',
                request_serializer=server_dot_server__pb2.UpdateServerStatusRequest.SerializeToString,
                response_deserializer=server_dot_server__pb2.UpdateServerStatusResponse.FromString,
                )
        self.ServerEventsStream = channel.unary_stream(
                '/mruv.server.MruVServerService/ServerEventsStream',
                request_serializer=server_dot_server__pb2.ServerEventsStreamRequest.SerializeToString,
                response_deserializer=server_dot_server__pb2.ServerEvent.FromString,
                )


class MruVServerServiceServicer(object):
    """The MruV server service provides procedures for managing game platform server actions.
    """

    def RegisterServer(self, request, context):
        """Register instance of server for further managing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisteredServers(self, request, context):
        """Get all registered servers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerInfo(self, request, context):
        """Get game server status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateServerStatus(self, request, context):
        """Update game server status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerEventsStream(self, request, context):
        """Stream of server events. Events are streamed back in real-time for chosen server.
        TODO: Change name to: SubscribeServerEvents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MruVServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterServer,
                    request_deserializer=server_dot_server__model__pb2.ServerInfo.FromString,
                    response_serializer=server_dot_server__model__pb2.ServerID.SerializeToString,
            ),
            'GetRegisteredServers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisteredServers,
                    request_deserializer=server_dot_server__pb2.GetRegisteredServersRequest.FromString,
                    response_serializer=server_dot_server__pb2.GetRegisteredServersResponse.SerializeToString,
            ),
            'GetServerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerInfo,
                    request_deserializer=server_dot_server__model__pb2.ServerID.FromString,
                    response_serializer=server_dot_server__model__pb2.ServerInfo.SerializeToString,
            ),
            'UpdateServerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateServerStatus,
                    request_deserializer=server_dot_server__pb2.UpdateServerStatusRequest.FromString,
                    response_serializer=server_dot_server__pb2.UpdateServerStatusResponse.SerializeToString,
            ),
            'ServerEventsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerEventsStream,
                    request_deserializer=server_dot_server__pb2.ServerEventsStreamRequest.FromString,
                    response_serializer=server_dot_server__pb2.ServerEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mruv.server.MruVServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MruVServerService(object):
    """The MruV server service provides procedures for managing game platform server actions.
    """

    @staticmethod
    def RegisterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.server.MruVServerService/RegisterServer',
            server_dot_server__model__pb2.ServerInfo.SerializeToString,
            server_dot_server__model__pb2.ServerID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegisteredServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.server.MruVServerService/GetRegisteredServers',
            server_dot_server__pb2.GetRegisteredServersRequest.SerializeToString,
            server_dot_server__pb2.GetRegisteredServersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.server.MruVServerService/GetServerInfo',
            server_dot_server__model__pb2.ServerID.SerializeToString,
            server_dot_server__model__pb2.ServerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateServerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mruv.server.MruVServerService/UpdateServerStatus',
            server_dot_server__pb2.UpdateServerStatusRequest.SerializeToString,
            server_dot_server__pb2.UpdateServerStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerEventsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mruv.server.MruVServerService/ServerEventsStream',
            server_dot_server__pb2.ServerEventsStreamRequest.SerializeToString,
            server_dot_server__pb2.ServerEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
